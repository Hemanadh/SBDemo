spring:
  application:
    name: microservice-a
  config:
    import: optional:configserver:http://localhost:8888/
    name: different-config-properties
  cloud:
    config:
      name: different-config-properties
  boot:
    admin:
      client:
        url: http://localhost:9090/
  security:
    user:
      password: 123
  datasource:
    url: jdbc:mysql://localhost:3306/user_management  # jdbc:oracle:thin:@localhost:1521:user_management
                                                      # jdbc:postgresql://localhost:5432/user_management
                                                      # jdbc:sqlserver://localhost:1433;databaseName=user_management
                                                      # jdbc:sqlite:/path_to_db/user_management.db
                                                      # jdbc:h2:mem:user_management
    username: root
    password: root
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect #MySQLDialect,PostgreSQLDialect,OracleDialect,SQLServerDialect
    hibernate:
      ddl-auto: update  # none - no attempt to modify the database schema
                        # validate - validate that the database schema matches the entity mappings without making changes
                        # update   - will attempt to update the database schema to match the entity mappings. It modifies the schema if necessary but does not drop existing tables or data
                        # create   -  will create the database schema on startup, dropping any existing schema and data
                        # create-drop - Same as create, but the schema will be dropped when the application shuts down.

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}  # Custom instance ID

management:
  security:
    enabled: false
  tracing:
    enabled: true
  sleuth:
    sampler:
      probability: 1.0
  zipkin:
    base-url: http://localhost:9411
  endpoints:
      web:
        exposure:
          include: refresh,health,info,restart, shutdown,metrics, env, loggers, threaddump, caches, circuitbreakers
      endpoint:
        refresh:
          enable: true
      health:
        show-details: always
springdoc:
  swagger-ui:
    enabled: false # disabling the spring doc provided swagger ui and the use custom swagger ui code, which kept in resources/static/swagger-ui folder to disable try it out

resilience4j.circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true # Tells Resilience4j to register a health indicator for the Circuit Breaker with Spring Boot Actuator.
        failureRateThreshold: 50 # Failure rate percentage - If you make 20 calls and 1 of them fails, the Circuit Breaker will open because 1/20 = 5%.
        waitDurationInOpenState: 5s # How long the Circuit Breaker should remain in the OPEN state before transitioning to the HALF_OPEN state
        permittedNumberOfCallsInHalfOpenState: 3 # Number of test calls allowed while the Circuit Breaker is in the HALF_OPEN state
        slidingWindowSize: 5 # The failure rate is calculated over last 5 calls
        minimumNumberOfCalls: 10 # Minimum number of calls that must be made before the Circuit Breaker starts calculating the failure rate
    instances:
      getUsersCircuitBreaker:
        baseConfig: default
      addNewUserCircuitBreaker:
        baseConfig: default
      getUserCircuitBreaker:
        baseConfig: default
      modifyUserCircuitBreaker:
        baseConfig: default
      circuitBreakerCheck:
        baseConfig: default
      getUserInfoBreaker:
        baseConfig: default

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 100
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException

  instances:
    getUsersRetry:
      baseConfig: default
    addUserRetry:
      baseConfig: default
    getUserRetry:
      baseConfig: default
    modifyUserRetry:
      baseConfig: default

resilience4j.bulkhead:
  configs:
    default:
      maxConcurrentCalls: 100
  instances:
    getUsersBulkHead:
      maxConcurrentCalls: 10
    addUserBulkHead:
      maxWaitDuration: 10ms
      maxConcurrentCalls: 20
    getUserBulkHead:
      maxConcurrentCalls: 10
    modifyUserBulkHead:
      maxWaitDuration: 10ms
      maxConcurrentCalls: 20

resilience4j.ratelimiter:
  configs:
    default:
      registerHealthIndicator: false
      limitForPeriod: 1000
      limitRefreshPeriod: 1s
      timeoutDuration: 10
      eventConsumerBufferSize: 100
  instances:
    getUsersRateLimiter:
      baseConfig: default
    addUserRateLimiter:
      baseConfig: default
    getUserRateLimiter:
      baseConfig: default
    modifyUserRateLimiter:
      baseConfig: default

resilience4j.timelimiter:
  configs:
    default:
      cancelRunningFuture: false
      timeoutDuration: 6s
  instances:
    getUsersTimeLimiter:
      baseConfig: default
    addUserTimeLimiter:
      baseConfig: default
    getUserTimeLimiter:
      baseConfig: default
    modifyUserTimeLimiter:
      baseConfig: default

logging:
  level:
    io.github.resilience4j.circuitbreaker: DEBUG


---
spring:
  config:
    activate:
      on-profile: dev
  application:
    name: devProfile
props:
  name: "Abc"
  age: 25
  email: "abcv@gmail.com"

---
spring:
  config:
    activate:
      on-profile:  uat
  application:
    name: uatProfile

---
spring:
  config:
    activate:
      on-profile:  sit
  application:
    name: sitProfile
---
spring:
  config:
    activate:
      on-profile:  prod
  application:
    name: prodProfile
